$date
	Mon Aug 14 03:12:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # memory_read_data [31:0] $end
$var wire 32 $ memory_program_data [31:0] $end
$var wire 5 % mem_wb_rd_addr [4:0] $end
$var wire 20 & mem_wb_csr_addr [19:0] $end
$var wire 5 ' id_rs2_addr [4:0] $end
$var wire 5 ( id_rs1_addr [4:0] $end
$var wire 5 ) id_ex_rd_addr [4:0] $end
$var wire 32 * id_ex_imm_z_uext [31:0] $end
$var wire 5 + id_ex_imm_z [4:0] $end
$var wire 32 , id_ex_imm_u_shifted_sext [31:0] $end
$var wire 20 - id_ex_imm_u [19:0] $end
$var wire 32 . id_ex_imm_s_sext [31:0] $end
$var wire 12 / id_ex_imm_s [11:0] $end
$var wire 32 0 id_ex_imm_j_sext [31:0] $end
$var wire 21 1 id_ex_imm_j [20:0] $end
$var wire 32 2 id_ex_imm_i_sext [31:0] $end
$var wire 12 3 id_ex_imm_i [11:0] $end
$var wire 32 4 id_ex_imm_b_sext [31:0] $end
$var wire 13 5 id_ex_imm_b [12:0] $end
$var wire 20 6 id_ex_csr_addr [19:0] $end
$var wire 5 7 ex_mem_rd_addr [4:0] $end
$var wire 20 8 ex_mem_csr_addr [19:0] $end
$var reg 32 9 alu_out [31:0] $end
$var reg 32 : ex_mem_alu_out [31:0] $end
$var reg 32 ; ex_mem_inst [31:0] $end
$var reg 32 < ex_mem_pc [31:0] $end
$var reg 32 = ex_mem_rs1_data [31:0] $end
$var reg 32 > ex_mem_rs2_data [31:0] $end
$var reg 32 ? id_ex_inst [31:0] $end
$var reg 32 @ id_ex_pc [31:0] $end
$var reg 32 A id_ex_rs1_data [31:0] $end
$var reg 32 B id_ex_rs2_data [31:0] $end
$var reg 2 C id_ex_stall_flag [1:0] $end
$var reg 1 D id_mem_stall_flag $end
$var reg 32 E id_rs1_data [31:0] $end
$var reg 32 F id_rs2_data [31:0] $end
$var reg 32 G if_ie_inst [31:0] $end
$var reg 32 H if_ie_pc [31:0] $end
$var reg 32 I jmp_addr [31:0] $end
$var reg 1 J jmp_flag $end
$var reg 32 K mem_wb_alu_out [31:0] $end
$var reg 32 L mem_wb_inst [31:0] $end
$var reg 32 M mem_wb_memory_read_data [31:0] $end
$var reg 1 N memory_data_load $end
$var reg 1 O memory_program_load $end
$var reg 1 P memory_wen $end
$var reg 32 Q pc [31:0] $end
$var reg 1 R stall_flag $end
$var reg 32 S wb_inst [31:0] $end
$var integer 32 T i [31:0] $end
$scope module memory $end
$var wire 1 N data_load $end
$var wire 32 U program_addr [31:0] $end
$var wire 1 O program_load $end
$var wire 32 V read_addr [31:0] $end
$var wire 1 P wen $end
$var wire 32 W write_addr [31:0] $end
$var wire 32 X write_data [31:0] $end
$var reg 32 Y program_data [31:0] $end
$var reg 32 Z read_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 [ \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 \ \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ] \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ^ \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 _ \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ` \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 a \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 b \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 c \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 d \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 e \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 f \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 g \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 h \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 i \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 j \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 k \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 l \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 m \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 n \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 o \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 p \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 q \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 r \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 s \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 t \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 u \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 v \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 w \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 x \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 y \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 z \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 { \rs[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 | \rs[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 } \rs[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ~ \rs[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 !" \rs[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 "" \rs[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 #" \rs[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 $" \rs[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 %" \rs[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 &" \rs[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 '" \rs[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 (" \rs[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 )" \rs[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 *" \rs[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 +" \rs[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ," \rs[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 -" \rs[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ." \rs[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 /" \rs[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 0" \rs[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 1" \rs[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 2" \rs[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 3" \rs[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 4" \rs[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 5" \rs[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 6" \rs[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 7" \rs[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 8" \rs[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 9" \rs[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 :" \rs[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ;" \rs[30] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 <" \csr[773] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 =" \csr[305] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b11111100 f
b1010010 e
b11110 d
b11100011 c
b0 b
b100000 a
b10 `
b10010011 _
b0 ^
b10010 ]
b10 \
b10011 [
bx Z
b100100000001000010011 Y
bx X
bx W
bx V
b0 U
b1000000000000 T
bx S
0R
b0 Q
1P
0O
1N
bx M
bx L
bx K
0J
b0 I
bx H
bx G
bx F
bx E
0D
b0 C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b0xxxxxxxxxxxx 8
bx 7
b0xxxxxxxxxxxx 6
bx0 5
bx0 4
bx 3
bx 2
bx0 1
bx0 0
bx /
bx .
bx -
bx000000000000 ,
bx +
b0xxxxx *
bx )
bx (
bx '
b0xxxxxxxxxxxx &
bx %
b100100000001000010011 $
bx #
0"
1!
$end
#1000
b0 {
1O
#5000
b100 (
b1 '
b0 H
b100100000001000010011 G
0!
#10000
b0 {
b1000000000001010010011 $
b1000000000001010010011 Y
1"
b0 F
b0 E
0O
b100 Q
b100 U
1!
#11000
b0 {
1O
#15000
b100 )
b1 2
b1 3
b100 .
b100 /
b100 4
b100 5
b100000100000000000 0
b100000100000000000 1
b100100000000000000000 ,
b100100000 -
b1 6
b100 *
b100 +
b0 (
b10 '
b0 B
b0 A
b100100000001000010011 ?
b0 @
b100 H
b1000000000001010010011 G
0!
#20000
b0 {
b11111100010100100001111011100011 $
b11111100010100100001111011100011 Y
0O
b1000 Q
b1000 U
b1 9
0"
1!
#21000
b0 {
1O
#25000
b100 (
b101 '
b101 )
b10 2
b10 3
b101 .
b101 /
b100000000100 4
b100000000100 5
b10 0
b10 1
b1000000000000000000000 ,
b1000000000 -
b10 6
b0 *
b0 +
b100 7
b1 8
b1000 H
b11111100010100100001111011100011 G
b1000000000001010010011 ?
b100 @
b100100000001000010011 ;
b0 >
b0 X
b0 =
b1 :
b1 V
b1 W
b0 <
0!
#30000
b0 {
bx $
bx Y
b10 9
b1 C
1D
0O
b1100 Q
b1100 U
1!
#31000
b0 {
1O
#35000
b100 %
b1 &
b101 7
b10 8
b0 )
b0 2
b0 3
b0 .
b0 /
b0 4
b0 5
b0 0
b0 1
b0 ,
b0 -
b0 6
b1 K
b100100000001000010011 L
b1000000000001010010011 ;
b10 :
b10 V
b10 W
b100 <
b110011 ?
b1000 @
0!
#40000
b0 {
0O
0D
b1 E
b0 9
b1 !"
1!
#41000
b0 {
1O
#45000
b0 7
b0 8
b101 %
b10 &
b110011 ;
b0 :
b0 V
b0 W
b1000 <
b10 K
b1000000000001010010011 L
b100100000001000010011 S
0!
#50000
b0 {
b10 ""
b10 F
0O
b10 C
1!
#51000
b0 {
1O
#55000
b0 %
b0 &
b1000000000001010010011 S
b0 K
b110011 L
0!
#60000
0O
b0 C
b0 {
1!
#61000
b0 {
1O
#65000
bx (
bx '
b11101 )
b11111111111111111111111111000101 2
b111111000101 3
b11111111111111111111111111011101 .
b111111011101 /
b11111111111111111111111111011100 4
b1111111011100 5
b11111111111100100001111111000100 0
b100100001111111000100 1
b11111100010100100001000000000000 ,
b11111100010100100001 -
b111111000101 6
b100 *
b100 +
b1100 H
bx G
b10 B
b1 A
b11111100010100100001111011100011 ?
b110011 S
0!
#70000
b0 {
b11111111111111111111111111100100 9
bx F
bx E
0O
b10000 Q
b10000 U
1!
#71000
b0 {
1O
#75000
b11101 7
b111111000101 8
bx )
bx 2
bx 3
bx .
bx /
bx0 4
bx0 5
bx0 0
bx0 1
bx000000000000 ,
bx -
b0xxxxxxxxxxxx 6
b0xxxxx *
bx +
b11111100010100100001111011100011 ;
b10 >
b10 X
b1 =
b11111111111111111111111111100100 :
b11111111111111111111111111100100 V
b11111111111111111111111111100100 W
bx B
bx A
bx ?
b1100 @
b10000 H
0!
#80000
0O
b10100 Q
b10100 U
b11111111111111111111111111100100 I
1J
b0 {
1!
#81000
b0 {
1O
#85000
b0 (
b0 '
b0 )
b0 2
b0 3
b0 .
b0 /
b0 4
b0 5
b0 0
b0 1
b0 ,
b0 -
b0 6
b0 *
b0 +
b0 7
b0 8
b110011 G
b0 B
b0 A
b110011 ?
b10000 @
b110011 ;
bx >
bx X
bx =
b1100 <
b11111111111111111111111111100100 K
0!
#90000
b0 {
b0 9
b0 F
b0 E
0O
0J
b11111111111111111111111111100100 Q
b11111111111111111111111111100100 U
1!
#91000
b0 {
1O
#95000
bx (
bx '
b0 >
b0 X
b0 =
b0 :
b0 V
b0 W
b10000 <
b11111111111111111111111111100100 H
bx G
0!
#100000
0O
b11111111111111111111111111101000 Q
b11111111111111111111111111101000 U
bx F
bx E
b0 {
1!
#101000
b0 {
1O
#105000
bx )
bx 2
bx 3
bx .
bx /
bx0 4
bx0 5
bx0 0
bx0 1
bx000000000000 ,
bx -
b0xxxxxxxxxxxx 6
b0xxxxx *
bx +
b11111111111111111111111111101000 H
bx B
bx A
bx ?
b11111111111111111111111111100100 @
b0 K
0!
#110000
b0 {
0O
b11111111111111111111111111101100 Q
b11111111111111111111111111101100 U
1!
#111000
b0 {
1O
#115000
bx 7
b0xxxxxxxxxxxx 8
bx ;
bx >
bx X
bx =
b11111111111111111111111111100100 <
b11111111111111111111111111101000 @
b11111111111111111111111111101100 H
0!
#120000
0O
b11111111111111111111111111110000 Q
b11111111111111111111111111110000 U
b0 {
1!
#121000
b0 {
1O
#125000
bx %
b0xxxxxxxxxxxx &
b11111111111111111111111111110000 H
b11111111111111111111111111101100 @
b11111111111111111111111111101000 <
bx L
0!
#130000
b0 {
0O
b11111111111111111111111111110100 Q
b11111111111111111111111111110100 U
1!
#131000
b0 {
1O
#135000
bx S
b11111111111111111111111111101100 <
b11111111111111111111111111110000 @
b11111111111111111111111111110100 H
0!
#140000
b0 {
0O
b11111111111111111111111111111000 Q
b11111111111111111111111111111000 U
1!
#141000
b0 {
1O
#145000
b11111111111111111111111111111000 H
b11111111111111111111111111110100 @
b11111111111111111111111111110000 <
0!
#150000
b0 {
0O
b11111111111111111111111111111100 Q
b11111111111111111111111111111100 U
1!
#151000
b0 {
1O
#155000
b11111111111111111111111111110100 <
b11111111111111111111111111111000 @
b11111111111111111111111111111100 H
0!
#160000
b0 {
b100100000001000010011 $
b100100000001000010011 Y
0O
b0 Q
b0 U
1!
#161000
b0 {
1O
#165000
b100 (
b1 '
b0 H
b100100000001000010011 G
b11111111111111111111111111111100 @
b11111111111111111111111111111000 <
0!
#170000
b0 {
b1000000000001010010011 $
b1000000000001010010011 Y
b0 F
b1 E
0O
b100 Q
b100 U
1!
#171000
b0 {
1O
#175000
b100 )
b1 2
b1 3
b100 .
b100 /
b100 4
b100 5
b100000100000000000 0
b100000100000000000 1
b100100000000000000000 ,
b100100000 -
b1 6
b100 *
b100 +
b0 (
b10 '
b11111111111111111111111111111100 <
b0 B
b1 A
b100100000001000010011 ?
b0 @
b100 H
b1000000000001010010011 G
0!
#180000
b0 {
b11111100010100100001111011100011 $
b11111100010100100001111011100011 Y
0O
b1000 Q
b1000 U
b0 E
b10 9
1!
#181000
b0 {
1O
#185000
b100 (
b101 '
b101 )
b10 2
b10 3
b101 .
b101 /
b100000000100 4
b100000000100 5
b10 0
b10 1
b1000000000000000000000 ,
b1000000000 -
b10 6
b0 *
b0 +
b100 7
b1 8
b1000 H
b11111100010100100001111011100011 G
b0 A
b1000000000001010010011 ?
b100 @
b100100000001000010011 ;
b0 >
b0 X
b1 =
b10 :
b10 V
b10 W
b0 <
0!
#190000
b0 {
bx $
bx Y
b10 F
b1 E
b1 C
1D
0O
b1100 Q
b1100 U
1!
#191000
b0 {
1O
#195000
b100 %
b1 &
b101 7
b10 8
b0 )
b0 2
b0 3
b0 .
b0 /
b0 4
b0 5
b0 0
b0 1
b0 ,
b0 -
b0 6
b10 K
b100100000001000010011 L
b1000000000001010010011 ;
b0 =
b100 <
b110011 ?
b1000 @
0!
#200000
b0 {
0O
0D
b10 E
b0 9
b10 !"
1!
#201000
b0 {
1O
#205000
b0 7
b0 8
b101 %
b10 &
b110011 ;
b0 :
b0 V
b0 W
b1000 <
b1000000000001010010011 L
b100100000001000010011 S
0!
#210000
b0 {
b10 ""
0O
b10 C
1!
#211000
b0 {
1O
#215000
b0 %
b0 &
b1000000000001010010011 S
b0 K
b110011 L
0!
#220000
0O
b0 C
b0 {
1!
#221000
b0 {
1O
#225000
bx (
bx '
b11101 )
b11111111111111111111111111000101 2
b111111000101 3
b11111111111111111111111111011101 .
b111111011101 /
b11111111111111111111111111011100 4
b1111111011100 5
b11111111111100100001111111000100 0
b100100001111111000100 1
b11111100010100100001000000000000 ,
b11111100010100100001 -
b111111000101 6
b100 *
b100 +
b1100 H
bx G
b10 B
b10 A
b11111100010100100001111011100011 ?
b110011 S
0!
#230000
b0 {
bx F
bx E
0O
b10000 Q
b10000 U
1!
#231000
b0 {
1O
#235000
b11101 7
b111111000101 8
bx )
bx 2
bx 3
bx .
bx /
bx0 4
bx0 5
bx0 0
bx0 1
bx000000000000 ,
bx -
b0xxxxxxxxxxxx 6
b0xxxxx *
bx +
b11111100010100100001111011100011 ;
b10 >
b10 X
b10 =
bx B
bx A
bx ?
b1100 @
b10000 H
0!
#240000
0O
b10100 Q
b10100 U
b0 I
b0 {
1!
#241000
b0 {
1O
#245000
bx 7
b0xxxxxxxxxxxx 8
b11101 %
b111111000101 &
b10100 H
b10000 @
bx ;
bx >
bx X
bx =
b1100 <
b11111100010100100001111011100011 L
0!
#250000
b0 {
0O
b11000 Q
b11000 U
1!
#251000
b0 {
1O
#255000
bx %
b0xxxxxxxxxxxx &
b11111100010100100001111011100011 S
bx L
b10000 <
b10100 @
b11000 H
0!
#260000
b0 {
0O
b11100 Q
b11100 U
1!
#261000
b0 {
1O
#265000
b11100 H
b11000 @
b10100 <
bx S
0!
#270000
b0 {
0O
b100000 Q
b100000 U
1!
#271000
b0 {
1O
#275000
b11000 <
b11100 @
b100000 H
0!
#280000
b0 {
0O
b100100 Q
b100100 U
1!
#281000
b0 {
1O
#285000
b100100 H
b100000 @
b11100 <
0!
#290000
b0 {
0O
b101000 Q
b101000 U
1!
#291000
b0 {
1O
#295000
b100000 <
b100100 @
b101000 H
0!
#300000
b0 {
0O
b101100 Q
b101100 U
1!
