$date
	Sun Aug 13 01:57:44 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 " memory_read_addr [31:0] $end
$var wire 32 # memory_write_addr [31:0] $end
$var wire 1 $ rst $end
$var wire 32 % memory_write_data [31:0] $end
$var wire 32 & memory_read_data [31:0] $end
$var wire 32 ' memory_program_data [31:0] $end
$var wire 5 ( mem_wb_rd_addr [4:0] $end
$var wire 20 ) mem_wb_csr_addr [19:0] $end
$var wire 5 * id_ex_rd_addr [4:0] $end
$var wire 32 + id_ex_imm_z_uext [31:0] $end
$var wire 5 , id_ex_imm_z [4:0] $end
$var wire 32 - id_ex_imm_u_shifted_sext [31:0] $end
$var wire 20 . id_ex_imm_u [19:0] $end
$var wire 32 / id_ex_imm_s_sext [31:0] $end
$var wire 12 0 id_ex_imm_s [11:0] $end
$var wire 32 1 id_ex_imm_j_sext [31:0] $end
$var wire 21 2 id_ex_imm_j [20:0] $end
$var wire 32 3 id_ex_imm_i_sext [31:0] $end
$var wire 12 4 id_ex_imm_i [11:0] $end
$var wire 32 5 id_ex_imm_b_sext [31:0] $end
$var wire 13 6 id_ex_imm_b [12:0] $end
$var wire 20 7 id_ex_csr_addr [19:0] $end
$var reg 32 8 alu_out [31:0] $end
$var reg 32 9 ex_mem_alu_out [31:0] $end
$var reg 32 : ex_mem_inst [31:0] $end
$var reg 32 ; ex_mem_pc [31:0] $end
$var reg 32 < ex_mem_rs1_data [31:0] $end
$var reg 32 = ex_mem_rs2_data [31:0] $end
$var reg 32 > id_ex_inst [31:0] $end
$var reg 32 ? id_ex_pc [31:0] $end
$var reg 32 @ id_ex_rs1_data [31:0] $end
$var reg 32 A id_ex_rs2_data [31:0] $end
$var reg 32 B id_rs1_data [31:0] $end
$var reg 32 C id_rs2_data [31:0] $end
$var reg 32 D if_ie_inst [31:0] $end
$var reg 32 E if_ie_pc [31:0] $end
$var reg 32 F jmp_addr [31:0] $end
$var reg 1 G jmp_flag $end
$var reg 32 H mem_wb_alu_out [31:0] $end
$var reg 32 I mem_wb_inst [31:0] $end
$var reg 1 J memory_data_load $end
$var reg 1 K memory_program_load $end
$var reg 1 L memory_wen $end
$var reg 32 M pc [31:0] $end
$var integer 32 N i [31:0] $end
$scope module memory $end
$var wire 1 J data_load $end
$var wire 32 O program_addr [31:0] $end
$var wire 1 K program_load $end
$var wire 32 P read_addr [31:0] $end
$var wire 1 L wen $end
$var wire 32 Q write_addr [31:0] $end
$var reg 32 R program_data [31:0] $end
$var reg 32 S read_data [31:0] $end
$var reg 32 T write_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 U \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 V \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 W \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 X \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Y \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Z \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 [ \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 \ \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ] \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ^ \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 _ \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ` \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 a \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 b \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 c \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 d \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 e \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 f \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 g \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 h \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 i \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 j \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 k \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 l \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 m \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 n \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 o \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 p \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 q \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 r \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 s \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 t \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 u \rs[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 v \rs[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 w \rs[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 x \rs[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 y \rs[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 z \rs[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 { \rs[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 | \rs[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 } \rs[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ~ \rs[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 !" \rs[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 "" \rs[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 #" \rs[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 $" \rs[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 %" \rs[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 &" \rs[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 '" \rs[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 (" \rs[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 )" \rs[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 *" \rs[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 +" \rs[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ," \rs[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 -" \rs[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ." \rs[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 /" \rs[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 0" \rs[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 1" \rs[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 2" \rs[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 3" \rs[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 4" \rs[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 5" \rs[30] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110 5"
b11101 4"
b11100 3"
b11011 2"
b11010 1"
b11001 0"
b11000 /"
b10111 ."
b10110 -"
b10101 ,"
b10100 +"
b10011 *"
b10010 )"
b10001 ("
b10000 '"
b1111 &"
b1110 %"
b1101 $"
b1100 #"
b1011 ""
b1010 !"
b1001 ~
b1000 }
b111 |
b110 {
b101 z
b100 y
b11 x
b10 w
b1 v
b0 u
b0 t
b11110111 s
b110 r
b10110011 q
b0 p
b11110111 o
b110 n
b10110011 m
b0 l
b11110111 k
b110 j
b10110011 i
b0 h
b11000101 g
b10000101 f
b110011 e
b0 d
b10010100 c
b11 b
b10110011 a
b0 `
b1100010 _
b10000010 ^
b110011 ]
b0 \
b110001 [
b0 Z
b10110011 Y
b10 X
b10000 W
b10000000 V
b1100011 U
bx T
bx S
b10000100001000000001100011 R
bz Q
bz P
b0 O
b1000000000000 N
b0 M
1L
0K
1J
bx I
bx H
0G
b0 F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b0xxxxxxxxxxxx 7
bx0 6
bx0 5
bx 4
bx 3
bx0 2
bx0 1
bx 0
bx /
bx .
bx000000000000 -
bx ,
b0xxxxx +
bx *
b0xxxxxxxxxxxx )
bx (
b10000100001000000001100011 '
bx &
bx %
0$
bz #
bz "
1!
$end
#1000
1K
#5000
b0 E
b10000100001000000001100011 D
0!
#10000
b1100010000000010110011 '
b1100010000000010110011 R
1$
b1 C
b1 B
0K
b100 M
b100 O
1!
#11000
1K
#15000
b0 *
b100001 3
b100001 4
b100000 /
b100000 0
b100000 5
b100000 6
b1000100000100000 1
b1000100000100000 2
b10000100001000000000000000 -
b10000100001000 .
b100001 7
b1 +
b1 ,
b1 A
b1 @
b10000100001000000001100011 >
b0 ?
b100 E
b1100010000000010110011 D
0!
#20000
b11000101000001000110011 '
b11000101000001000110011 R
0K
b1000 M
b1000 O
b11 C
b10 B
b100000 8
0$
1!
#21000
1K
#25000
b1 *
b11 3
b11 4
b1 /
b1 0
b100000000000 5
b100000000000 6
b10000100000000010 1
b10000100000000010 2
b1100010000000000000000 -
b1100010000 .
b11 7
b10 +
b10 ,
b1000 E
b11000101000001000110011 D
b11 A
b10 @
b1100010000000010110011 >
b100 ?
b10000100001000000001100011 :
b1 =
b1 <
b100000 9
b0 ;
0!
#30000
b100101000000001110110011 '
b100101000000001110110011 R
b100000 F
1G
b101 8
b110 C
b101 B
0K
b1100 M
b1100 O
1!
#31000
1K
#35000
b0 (
b0 )
b0 *
b0 3
b0 4
b0 /
b0 0
b0 5
b0 6
b0 1
b0 2
b0 -
b0 .
b0 7
b0 +
b0 ,
b100000 H
b10011 I
b10011 :
b0 =
b0 <
b101 9
b100 ;
b0 A
b0 @
b10011 >
b1000 ?
b1100 E
b10011 D
0!
#40000
b111101110000011010110011 '
b111101110000011010110011 R
0K
0G
b100000 M
b100000 O
b0 C
b0 B
b0 8
b100000 u
1!
#41000
1K
#45000
b100000 E
b111101110000011010110011 D
b1100 ?
b0 9
b1000 ;
b101 H
0!
#50000
b101 u
b1111 C
b1110 B
0K
b100100 M
b100100 O
1!
#51000
1K
#55000
b1101 *
b1111 3
b1111 4
b1101 /
b1101 0
b100000001100 5
b100000001100 6
b1110000100000001110 1
b1110000100000001110 2
b111101110000000000000000 -
b111101110000 .
b1111 7
b1110 +
b1110 ,
b0 H
b1100 ;
b1111 A
b1110 @
b111101110000011010110011 >
b100000 ?
b100100 E
0!
#60000
0K
b101000 M
b101000 O
b11101 8
b0 u
1!
#61000
1K
#65000
b101000 E
b100100 ?
b111101110000011010110011 :
b1111 =
b1110 <
b11101 9
b100000 ;
0!
#70000
b0 u
0K
b101100 M
b101100 O
1!
#71000
1K
#75000
b1101 (
b1111 )
b11101 H
b111101110000011010110011 I
b100100 ;
b101000 ?
b101100 E
0!
#80000
0K
b110000 M
b110000 O
b11101 $"
1!
#81000
1K
#85000
b110000 E
b101100 ?
b101000 ;
0!
#90000
b11101 $"
0K
b110100 M
b110100 O
1!
#91000
1K
#95000
b101100 ;
b110000 ?
b110100 E
0!
#100000
bx '
bx R
0K
b111000 M
b111000 O
b11101 $"
1!
#101000
1K
#105000
b111000 E
bx D
b110100 ?
b110000 ;
0!
#110000
b11101 $"
bx C
bx B
0K
b111100 M
b111100 O
1!
#111000
1K
#115000
bx *
bx 3
bx 4
bx /
bx 0
bx0 5
bx0 6
bx0 1
bx0 2
bx000000000000 -
bx .
b0xxxxxxxxxxxx 7
b0xxxxx +
bx ,
b110100 ;
bx A
bx @
bx >
b111000 ?
b111100 E
0!
#120000
0K
b1000000 M
b1000000 O
b11101 $"
1!
#121000
1K
#125000
b1000000 E
b111100 ?
bx :
bx =
bx <
b111000 ;
0!
#130000
b11101 $"
0K
b1000100 M
b1000100 O
1!
#131000
1K
#135000
bx (
b0xxxxxxxxxxxx )
bx I
b111100 ;
b1000000 ?
b1000100 E
0!
#140000
0K
b1001000 M
b1001000 O
1!
#141000
1K
#145000
b1001000 E
b1000100 ?
b1000000 ;
0!
#150000
0K
b1001100 M
b1001100 O
1!
#151000
1K
#155000
b1000100 ;
b1001000 ?
b1001100 E
0!
#160000
0K
b1010000 M
b1010000 O
1!
#161000
1K
#165000
b1010000 E
b1001100 ?
b1001000 ;
0!
#170000
0K
b1010100 M
b1010100 O
1!
#171000
1K
#175000
b1001100 ;
b1010000 ?
b1010100 E
0!
#180000
0K
b1011000 M
b1011000 O
1!
#181000
1K
#185000
b1011000 E
b1010100 ?
b1010000 ;
0!
#190000
0K
b1011100 M
b1011100 O
1!
#191000
1K
#195000
b1010100 ;
b1011000 ?
b1011100 E
0!
#200000
0K
b1100000 M
b1100000 O
1!
#201000
1K
#205000
b1100000 E
b1011100 ?
b1011000 ;
0!
#210000
0K
b1100100 M
b1100100 O
1!
#211000
1K
#215000
b1011100 ;
b1100000 ?
b1100100 E
0!
#220000
0K
b1101000 M
b1101000 O
1!
#221000
1K
#225000
b1101000 E
b1100100 ?
b1100000 ;
0!
#230000
0K
b1101100 M
b1101100 O
1!
#231000
1K
#235000
b1100100 ;
b1101000 ?
b1101100 E
0!
#240000
0K
b1110000 M
b1110000 O
1!
#241000
1K
#245000
b1110000 E
b1101100 ?
b1101000 ;
0!
#250000
0K
b1110100 M
b1110100 O
1!
#251000
1K
#255000
b1101100 ;
b1110000 ?
b1110100 E
0!
#260000
0K
b1111000 M
b1111000 O
1!
#261000
1K
#265000
b1111000 E
b1110100 ?
b1110000 ;
0!
#270000
0K
b1111100 M
b1111100 O
1!
#271000
1K
#275000
b1110100 ;
b1111000 ?
b1111100 E
0!
#280000
0K
b10000000 M
b10000000 O
1!
#281000
1K
#285000
b10000000 E
b1111100 ?
b1111000 ;
0!
#290000
0K
b10000100 M
b10000100 O
1!
#291000
1K
#295000
b1111100 ;
b10000000 ?
b10000100 E
0!
#300000
0K
b10001000 M
b10001000 O
1!
