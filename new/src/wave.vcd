$date
	Sat Aug 12 23:46:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 " memory_read_addr [31:0] $end
$var wire 32 # memory_write_addr [31:0] $end
$var wire 1 $ rst $end
$var wire 32 % memory_write_data [31:0] $end
$var wire 32 & memory_read_data [31:0] $end
$var wire 32 ' memory_program_data [31:0] $end
$var wire 5 ( mem_wb_rd_addr [4:0] $end
$var wire 20 ) mem_wb_csr_addr [19:0] $end
$var wire 5 * id_ex_rd_addr [4:0] $end
$var wire 32 + id_ex_imm_z_uext [31:0] $end
$var wire 5 , id_ex_imm_z [4:0] $end
$var wire 32 - id_ex_imm_u_shifted_sext [31:0] $end
$var wire 20 . id_ex_imm_u [19:0] $end
$var wire 32 / id_ex_imm_s_sext [31:0] $end
$var wire 12 0 id_ex_imm_s [11:0] $end
$var wire 32 1 id_ex_imm_j_sext [31:0] $end
$var wire 21 2 id_ex_imm_j [20:0] $end
$var wire 32 3 id_ex_imm_i_sext [31:0] $end
$var wire 12 4 id_ex_imm_i [11:0] $end
$var wire 32 5 id_ex_imm_b_sext [31:0] $end
$var wire 13 6 id_ex_imm_b [12:0] $end
$var wire 20 7 id_ex_csr_addr [19:0] $end
$var reg 32 8 alu_out [31:0] $end
$var reg 32 9 ex_mem_alu_out [31:0] $end
$var reg 32 : ex_mem_inst [31:0] $end
$var reg 32 ; ex_mem_pc [31:0] $end
$var reg 32 < ex_mem_rs1_data [31:0] $end
$var reg 32 = ex_mem_rs2_data [31:0] $end
$var reg 32 > id_ex_inst [31:0] $end
$var reg 32 ? id_ex_pc [31:0] $end
$var reg 32 @ id_ex_rs1_data [31:0] $end
$var reg 32 A id_ex_rs2_data [31:0] $end
$var reg 32 B id_rs1_data [31:0] $end
$var reg 32 C id_rs2_data [31:0] $end
$var reg 32 D if_ie_inst [31:0] $end
$var reg 32 E if_ie_pc [31:0] $end
$var reg 32 F mem_wb_alu_out [31:0] $end
$var reg 32 G mem_wb_inst [31:0] $end
$var reg 1 H memory_data_load $end
$var reg 1 I memory_program_load $end
$var reg 1 J memory_wen $end
$var reg 32 K pc [31:0] $end
$var integer 32 L i [31:0] $end
$scope module memory $end
$var wire 1 H data_load $end
$var wire 32 M program_addr [31:0] $end
$var wire 1 I program_load $end
$var wire 32 N read_addr [31:0] $end
$var wire 1 J wen $end
$var wire 32 O write_addr [31:0] $end
$var reg 32 P program_data [31:0] $end
$var reg 32 Q read_data [31:0] $end
$var reg 32 R write_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 S \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 T \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 U \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 V \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 W \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 X \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Y \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Z \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 [ \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 \ \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ] \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ^ \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 _ \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ` \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 a \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 b \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 c \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 d \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 e \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 f \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 g \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 h \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 i \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 j \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 k \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 l \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 m \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 n \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 o \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 p \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 q \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 r \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 s \rs[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 t \rs[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 u \rs[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 v \rs[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 w \rs[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 x \rs[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 y \rs[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 z \rs[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 { \rs[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 | \rs[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 } \rs[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ~ \rs[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 !" \rs[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 "" \rs[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 #" \rs[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 $" \rs[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 %" \rs[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 &" \rs[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 '" \rs[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 (" \rs[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 )" \rs[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 *" \rs[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 +" \rs[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ," \rs[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 -" \rs[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ." \rs[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 /" \rs[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 0" \rs[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 1" \rs[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 2" \rs[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 3" \rs[30] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110 3"
b11101 2"
b11100 1"
b11011 0"
b11010 /"
b11001 ."
b11000 -"
b10111 ,"
b10110 +"
b10101 *"
b10100 )"
b10011 ("
b10010 '"
b10001 &"
b10000 %"
b1111 $"
b1110 #"
b1101 ""
b1100 !"
b1011 ~
b1010 }
b1001 |
b1000 {
b111 z
b110 y
b101 x
b100 w
b11 v
b10 u
b1 t
b0 s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
b0 ^
b10010100 ]
b11 \
b10110011 [
b0 Z
b1100010 Y
b10000010 X
b110011 W
b0 V
b110001 U
b0 T
b10110011 S
bx R
bx Q
b1100010000000010110011 P
bz O
bz N
b0 M
b1000000000000 L
b0 K
1J
0I
1H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b0xxxxxxxxxxxx 7
bx0 6
bx0 5
bx 4
bx 3
bx0 2
bx0 1
bx 0
bx /
bx .
bx000000000000 -
bx ,
b0xxxxx +
bx *
b0xxxxxxxxxxxx )
bx (
b1100010000000010110011 '
bx &
bx %
0$
bz #
bz "
1!
$end
#1000
1I
#5000
b0 E
b1100010000000010110011 D
0!
#10000
b11000101000001000110011 '
b11000101000001000110011 P
1$
b11 C
b10 B
0I
b100 K
b100 M
1!
#11000
1I
#15000
b1 *
b11 3
b11 4
b1 /
b1 0
b100000000000 5
b100000000000 6
b10000100000000010 1
b10000100000000010 2
b1100010000000000000000 -
b1100010000 .
b11 7
b10 +
b10 ,
b1100010000000010110011 >
b0 ?
b11 A
b10 @
b100 E
b11000101000001000110011 D
0!
#20000
b100101000000001110110011 '
b100101000000001110110011 P
0I
b1000 K
b1000 M
b110 C
b101 B
b101 8
0$
1!
#21000
1I
#25000
b100 *
b110 3
b110 4
b100 /
b100 0
b100 5
b100 6
b101000000000000110 1
b101000000000000110 2
b11000101000000000000000 -
b11000101000 .
b110 7
b101 +
b101 ,
b1000 E
b100101000000001110110011 D
b11000101000001000110011 >
b100 ?
b110 A
b101 @
b11 =
b10 <
b101 9
b1100010000000010110011 :
b0 ;
0!
#30000
bx '
bx P
b1011 8
b1001 C
b1000 B
0I
b1100 K
b1100 M
1!
#31000
1I
#35000
b1 (
b11 )
b111 *
b1001 3
b1001 4
b111 /
b111 0
b100000000110 5
b100000000110 6
b1000000100000001000 1
b1000000100000001000 2
b100101000000000000000000 -
b100101000000 .
b1001 7
b1000 +
b1000 ,
b101 F
b1100010000000010110011 G
b110 =
b101 <
b1011 9
b11000101000001000110011 :
b100 ;
b100101000000001110110011 >
b1000 ?
b1001 A
b1000 @
b1100 E
bx D
0!
#40000
0I
b10000 K
b10000 M
bx C
bx B
b10001 8
b101 t
1!
#41000
1I
#45000
bx *
bx 3
bx 4
bx /
bx 0
bx0 5
bx0 6
bx0 1
bx0 2
bx000000000000 -
bx .
b0xxxxxxxxxxxx 7
b0xxxxx +
bx ,
b100 (
b110 )
b10000 E
bx >
b1100 ?
bx A
bx @
b1001 =
b1000 <
b10001 9
b100101000000001110110011 :
b1000 ;
b1011 F
b11000101000001000110011 G
0!
#50000
b1011 w
0I
b10100 K
b10100 M
1!
#51000
1I
#55000
b111 (
b1001 )
b10001 F
b100101000000001110110011 G
bx =
bx <
bx :
b1100 ;
b10000 ?
b10100 E
0!
#60000
0I
b11000 K
b11000 M
b10001 z
1!
#61000
1I
#65000
bx (
b0xxxxxxxxxxxx )
b11000 E
b10100 ?
b10000 ;
bx G
0!
#70000
0I
b11100 K
b11100 M
1!
#71000
1I
#75000
b10100 ;
b11000 ?
b11100 E
0!
#80000
0I
b100000 K
b100000 M
1!
#81000
1I
#85000
b100000 E
b11100 ?
b11000 ;
0!
#90000
0I
b100100 K
b100100 M
1!
#91000
1I
#95000
b11100 ;
b100000 ?
b100100 E
0!
#100000
0I
b101000 K
b101000 M
1!
#101000
1I
#105000
b101000 E
b100100 ?
b100000 ;
0!
#110000
0I
b101100 K
b101100 M
1!
#111000
1I
#115000
b100100 ;
b101000 ?
b101100 E
0!
#120000
0I
b110000 K
b110000 M
1!
#121000
1I
#125000
b110000 E
b101100 ?
b101000 ;
0!
#130000
0I
b110100 K
b110100 M
1!
#131000
1I
#135000
b101100 ;
b110000 ?
b110100 E
0!
#140000
0I
b111000 K
b111000 M
1!
#141000
1I
#145000
b111000 E
b110100 ?
b110000 ;
0!
#150000
0I
b111100 K
b111100 M
1!
#151000
1I
#155000
b110100 ;
b111000 ?
b111100 E
0!
#160000
0I
b1000000 K
b1000000 M
1!
#161000
1I
#165000
b1000000 E
b111100 ?
b111000 ;
0!
#170000
0I
b1000100 K
b1000100 M
1!
#171000
1I
#175000
b111100 ;
b1000000 ?
b1000100 E
0!
#180000
0I
b1001000 K
b1001000 M
1!
#181000
1I
#185000
b1001000 E
b1000100 ?
b1000000 ;
0!
#190000
0I
b1001100 K
b1001100 M
1!
#191000
1I
#195000
b1000100 ;
b1001000 ?
b1001100 E
0!
#200000
0I
b1010000 K
b1010000 M
1!
#201000
1I
#205000
b1010000 E
b1001100 ?
b1001000 ;
0!
#210000
0I
b1010100 K
b1010100 M
1!
#211000
1I
#215000
b1001100 ;
b1010000 ?
b1010100 E
0!
#220000
0I
b1011000 K
b1011000 M
1!
#221000
1I
#225000
b1011000 E
b1010100 ?
b1010000 ;
0!
#230000
0I
b1011100 K
b1011100 M
1!
#231000
1I
#235000
b1010100 ;
b1011000 ?
b1011100 E
0!
#240000
0I
b1100000 K
b1100000 M
1!
#241000
1I
#245000
b1100000 E
b1011100 ?
b1011000 ;
0!
#250000
0I
b1100100 K
b1100100 M
1!
#251000
1I
#255000
b1011100 ;
b1100000 ?
b1100100 E
0!
#260000
0I
b1101000 K
b1101000 M
1!
#261000
1I
#265000
b1101000 E
b1100100 ?
b1100000 ;
0!
#270000
0I
b1101100 K
b1101100 M
1!
#271000
1I
#275000
b1100100 ;
b1101000 ?
b1101100 E
0!
#280000
0I
b1110000 K
b1110000 M
1!
#281000
1I
#285000
b1110000 E
b1101100 ?
b1101000 ;
0!
#290000
0I
b1110100 K
b1110100 M
1!
#291000
1I
#295000
b1101100 ;
b1110000 ?
b1110100 E
0!
#300000
0I
b1111000 K
b1111000 M
1!
