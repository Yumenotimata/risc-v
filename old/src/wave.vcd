$date
	Sat Aug  5 23:07:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # mem_data [31:0] $end
$var wire 32 $ d_mem_data [31:0] $end
$var reg 32 % addr [31:0] $end
$var reg 32 & alu_out [31:0] $end
$var reg 32 ' d_addr [31:0] $end
$var reg 1 ( d_load $end
$var reg 12 ) imm_b [11:0] $end
$var reg 32 * imm_b_sext [31:0] $end
$var reg 13 + imm_i [12:0] $end
$var reg 32 , imm_i_sext [31:0] $end
$var reg 13 - imm_s [12:0] $end
$var reg 32 . imm_s_sext [31:0] $end
$var reg 32 / inst [31:0] $end
$var reg 1 0 load $end
$var reg 32 1 pc [31:0] $end
$var reg 32 2 rd [31:0] $end
$var reg 5 3 rd_addr [4:0] $end
$var reg 32 4 rs1 [31:0] $end
$var reg 5 5 rs1_addr [4:0] $end
$var reg 32 6 rs2 [31:0] $end
$var reg 5 7 rs2_addr [4:0] $end
$var reg 3 8 stage [2:0] $end
$var reg 32 9 w_data [31:0] $end
$var reg 1 : wen $end
$var integer 32 ; i [31:0] $end
$scope module memory $end
$var wire 32 < addr [31:0] $end
$var wire 32 = d_addr [31:0] $end
$var wire 1 ( d_load $end
$var wire 1 0 load $end
$var wire 32 > w_data [31:0] $end
$var wire 1 : wen $end
$var reg 32 ? d_data [31:0] $end
$var reg 32 @ data [31:0] $end
$upscope $end
$scope task Excution $end
$upscope $end
$scope task IntructionDecode $end
$upscope $end
$scope task IntructionFetch $end
$upscope $end
$scope task MemoryAccess $end
$upscope $end
$scope task WriteBack $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 A \register[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 B \register[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 C \register[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 D \register[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 E \register[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 F \register[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 G \register[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 H \register[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 I \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 J \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 K \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 L \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 M \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 N \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 O \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 P \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Q \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 R \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 S \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 T \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 U \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 V \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 W \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 X \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Y \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Z \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 [ \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 \ \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ] \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ^ \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 _ \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ` \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 a \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 b \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 c \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 d \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 e \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 f \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 g \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 h \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
b11111110 L
b0 K
b1111 J
b1100011 I
b111 H
b110 G
b101 F
b100 E
b11 D
b10 C
b1 B
b0 A
bx @
bx ?
b0 >
bx =
b0 <
b100000 ;
1:
b0 9
bx 8
b0 7
bx 6
b0 5
bx 4
b0 3
bx 2
b0 1
10
b0 /
bx .
bx -
bx ,
bx +
bx *
bx )
1(
bx '
bx &
b0 %
bx $
bx #
0"
1!
$end
#5000
0!
#10000
1"
1!
#15000
0!
#20000
b0 8
0"
1!
#25000
0!
#30000
b11111110000000000000111101100011 #
b11111110000000000000111101100011 @
00
b100 1
b1 8
1!
#35000
0!
#40000
b11110 2
b0 6
b0 4
b11111111111111111111101111111111 *
b11111111111111111111111111111110 .
b11111111111111111111111111100000 ,
b111111111111 )
b111111111110 -
b111111100000 +
b11110 3
10
b11111110000000000000111101100011 /
b10 8
1!
#45000
0!
#50000
b11111111111111111111110000000011 1
b11 8
1!
#55000
0!
#60000
b100 8
1!
#65000
0!
#70000
b0 8
1!
#75000
0!
#80000
bx #
bx @
00
b11111111111111111111110000000011 %
b11111111111111111111110000000011 <
b11111111111111111111110000000111 1
b1 8
1!
#85000
0!
#90000
bx 2
bx 6
bx 4
bx *
bx .
bx ,
bx )
b0xxxxxxxxxxxx -
b0xxxxxxxxxxxx +
bx 3
bx 7
bx 5
10
bx /
b10 8
1!
#95000
0!
#100000
b11 8
1!
#105000
0!
#110000
b100 8
1!
#115000
0!
#120000
b0 8
1!
#125000
0!
#130000
00
b11111111111111111111110000000111 %
b11111111111111111111110000000111 <
b11111111111111111111110000001011 1
b1 8
1!
#135000
0!
#140000
10
b10 8
1!
#145000
0!
#150000
b11 8
1!
#155000
0!
#160000
b100 8
1!
#165000
0!
#170000
b0 8
1!
#175000
0!
#180000
00
b11111111111111111111110000001011 %
b11111111111111111111110000001011 <
b11111111111111111111110000001111 1
b1 8
1!
#185000
0!
#190000
10
b10 8
1!
#195000
0!
#200000
b11 8
1!
#205000
0!
#210000
b100 8
1!
#215000
0!
#220000
b0 8
1!
#225000
0!
#230000
00
b11111111111111111111110000001111 %
b11111111111111111111110000001111 <
b11111111111111111111110000010011 1
b1 8
1!
#235000
0!
#240000
10
b10 8
1!
#245000
0!
#250000
b11 8
1!
#255000
0!
#260000
b100 8
1!
#265000
0!
#270000
b0 8
1!
#275000
0!
#280000
00
b11111111111111111111110000010011 %
b11111111111111111111110000010011 <
b11111111111111111111110000010111 1
b1 8
1!
#285000
0!
#290000
10
b10 8
1!
#295000
0!
#300000
b11 8
1!
#305000
0!
#310000
b100 8
1!
#315000
0!
#320000
b0 8
1!
#325000
0!
#330000
00
b11111111111111111111110000010111 %
b11111111111111111111110000010111 <
b11111111111111111111110000011011 1
b1 8
1!
#335000
0!
#340000
10
b10 8
1!
#345000
0!
#350000
b11 8
1!
#355000
0!
#360000
b100 8
1!
#365000
0!
#370000
b0 8
1!
#375000
0!
#380000
00
b11111111111111111111110000011011 %
b11111111111111111111110000011011 <
b11111111111111111111110000011111 1
b1 8
1!
#385000
0!
#390000
10
b10 8
1!
#395000
0!
#400000
b11 8
1!
