$date
	Thu Aug 10 14:40:54 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 " rs1 [31:0] $end
$var wire 32 # rs2 [31:0] $end
$var wire 1 $ rst $end
$var wire 5 % rs2_addr [4:0] $end
$var wire 5 & rs1_addr [4:0] $end
$var wire 5 ' rd_addr [4:0] $end
$var wire 32 ( memory_read_data [31:0] $end
$var wire 32 ) memory_d_read_data [31:0] $end
$var wire 32 * imm_z_uext [31:0] $end
$var wire 5 + imm_z [4:0] $end
$var wire 32 , imm_u_shifted_sext [31:0] $end
$var wire 20 - imm_u [19:0] $end
$var wire 32 . imm_s_sext [31:0] $end
$var wire 12 / imm_s [11:0] $end
$var wire 32 0 imm_j_sext [31:0] $end
$var wire 21 1 imm_j [20:0] $end
$var wire 32 2 imm_i_sext [31:0] $end
$var wire 12 3 imm_i [11:0] $end
$var wire 32 4 imm_b_sext [31:0] $end
$var wire 13 5 imm_b [12:0] $end
$var wire 20 6 csr_addr [19:0] $end
$var reg 32 7 alu_out [31:0] $end
$var reg 1 8 br_flag $end
$var reg 32 9 br_jmp [31:0] $end
$var reg 1 : inc_flag $end
$var reg 32 ; jmp [31:0] $end
$var reg 1 < jmp_flag $end
$var reg 1 = memory_d_load $end
$var reg 1 > memory_load $end
$var reg 1 ? memory_wen $end
$var reg 32 @ memory_write_addr [31:0] $end
$var reg 32 A memory_write_data [31:0] $end
$var reg 32 B pc [31:0] $end
$var reg 3 C stage [2:0] $end
$var integer 32 D i [31:0] $end
$scope module memory $end
$var wire 1 = d_load $end
$var wire 32 E d_read_addr [31:0] $end
$var wire 1 > load $end
$var wire 32 F read_addr [31:0] $end
$var wire 1 ? wen $end
$var wire 32 G write_addr [31:0] $end
$var wire 32 H write_data [31:0] $end
$var reg 32 I d_out_data [31:0] $end
$var reg 32 J out_data [31:0] $end
$upscope $end
$scope task Decode $end
$upscope $end
$scope task Execute $end
$upscope $end
$scope task Fetch $end
$upscope $end
$scope task MemoryAccess $end
$upscope $end
$scope task WriteBack $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 K \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 L \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 M \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 N \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 O \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 P \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Q \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 R \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 S \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 T \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 U \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 V \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 W \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 X \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Y \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Z \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 [ \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 \ \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ] \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ^ \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 _ \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ` \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 a \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 b \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 c \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 d \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 e \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 f \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 g \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 h \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 i \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 j \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 k \rs[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 l \rs[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 m \rs[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 n \rs[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 o \rs[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 p \rs[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 q \rs[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 r \rs[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 s \rs[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 t \rs[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 u \rs[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 v \rs[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 w \rs[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 x \rs[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 y \rs[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 z \rs[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 { \rs[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 | \rs[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 } \rs[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ~ \rs[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 !" \rs[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 "" \rs[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 #" \rs[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 $" \rs[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 %" \rs[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 &" \rs[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 '" \rs[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 (" \rs[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 )" \rs[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 *" \rs[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 +" \rs[30] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ," \csr[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 -" \csr[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ." \csr[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 /" \csr[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 0" \csr[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 1" \csr[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 2" \csr[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 3" \csr[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 4" \csr[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 5" \csr[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 6" \csr[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 7" \csr[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 8" \csr[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 9" \csr[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 :" \csr[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ;" \csr[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 <" \csr[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 =" \csr[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 >" \csr[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ?" \csr[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 @" \csr[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 A" \csr[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 B" \csr[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 C" \csr[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 D" \csr[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 E" \csr[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 F" \csr[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 G" \csr[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 H" \csr[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 I" \csr[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 J" \csr[30] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110 J"
b11101 I"
b11100 H"
b11011 G"
b11010 F"
b11001 E"
b11000 D"
b10111 C"
b10110 B"
b10101 A"
b10100 @"
b10011 ?"
b10010 >"
b10001 ="
b10000 <"
b1111 ;"
b1110 :"
b1101 9"
b1100 8"
b1011 7"
b1010 6"
b1001 5"
b1000 4"
b111 3"
b110 2"
b101 1"
b100 0"
b11 /"
b10 ."
b1 -"
b0 ,"
b11110 +"
b11101 *"
b11100 )"
b11011 ("
b11010 '"
b11001 &"
b11000 %"
b10111 $"
b10110 #"
b10101 ""
b10100 !"
b10011 ~
b10010 }
b10001 |
b10000 {
b1111 z
b1110 y
b1101 x
b1100 w
b1011 v
b1010 u
b1001 t
b1000 s
b111 r
b110 q
b101 p
b100 o
b11 n
b10 m
b1 l
b0 k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
b110011 [
b110011 Z
b110011 Y
b110011 X
b100010 W
b100010 V
b100010 U
b100010 T
b10001 S
b0 R
b0 Q
b1000001 P
b10111 O
b1 N
b10000100 M
b1110000 L
b11110011 K
bx J
bx I
b0 H
bx G
b0 F
bx E
b111111111111 D
bx C
b0 B
b0 A
b0 @
1?
1>
1=
0<
b0 ;
0:
b0 9
08
bx 7
b0xxxxxxxxxxxx 6
bx0 5
bx0 4
bx 3
bx 2
bx0 1
bx0 0
bx /
bx .
bx -
bx000000000000 ,
bx +
b0xxxxx *
bx )
bx (
bx '
bx &
bx %
0$
bx #
bx "
1!
$end
#5000
0!
#10000
1$
1!
#15000
0!
#20000
b1000 *
b1000 +
b11000 6
b1100001000111000000000000 ,
b1100001000111 -
b1000111000000011000 0
b1000111000000011000 1
b100000000000 4
b100000000000 5
b1 .
b1 /
b11000 2
b11000 3
b1 '
b11000 #
b11000 %
b1000 "
b1000 &
b1100001000111000011110011 (
b1100001000111000011110011 J
0>
1:
b0 C
0$
1!
#21000
b0 k
1>
#25000
0!
#30000
b0 k
b1 C
1!
#35000
0!
#40000
b0 k
b10000 7
b10000 E
b10000 G
b10 C
1!
#45000
0!
#50000
b10000 D"
b11 C
1!
#52000
b0 k
#55000
0!
#60000
b0 k
b10000 l
b100 C
1!
#65000
0!
#70000
b0 *
b0 +
b0 6
b100000000000000 ,
b100 -
b100000000000000 0
b100000000000000 1
b10 4
b10 5
b10 .
b10 /
b0 2
b0 3
b10 '
b0 #
b0 %
b0 "
b0 &
b100000100010111 (
b100000100010111 J
0>
b100 B
b100 F
b0 C
1!
#71000
b0 k
1>
#75000
0!
#80000
b0 k
b1 C
1!
#85000
0!
#90000
b0 k
b100000000000100 7
b100000000000100 E
b100000000000100 G
b10 C
1!
#95000
0!
#100000
b11 C
1!
#102000
b0 k
#105000
0!
#110000
b0 k
b100000000000100 m
b100 C
1!
#115000
0!
#120000
b100 *
b100 +
b1000100010 6
b100010001000100010000000000000 ,
b100010001000100010 -
b100010001000100010 0
b100010001000100010 1
b1000100100 4
b1000100100 5
b1000100100 .
b1000100100 /
b1000100010 2
b1000100010 3
b100 '
b100000000000100 #
b10 %
b100 "
b100 &
b100010001000100010001000010001 (
b100010001000100010001000010001 J
0>
b1000 B
b1000 F
b0 C
1!
#121000
b0 k
1>
#125000
0!
#130000
b0 k
b1 C
1!
#135000
0!
#140000
b0 k
b10 C
1!
#145000
0!
#150000
b11 C
1!
#152000
b0 k
#155000
0!
#160000
b0 k
b100 C
1!
#165000
0!
#170000
b110 *
b110 +
b1100110011 6
b110011001100110011000000000000 ,
b110011001100110011 -
b110011101100110010 0
b110011101100110010 1
b1100100110 4
b1100100110 5
b1100100110 .
b1100100110 /
b1100110011 2
b1100110011 3
b110 '
b10011 #
b10011 %
b110 "
b110 &
b110011001100110011001100100010 (
b110011001100110011001100100010 J
0>
b1100 B
b1100 F
b0 C
1!
#171000
b0 k
1>
#175000
0!
#180000
b0 k
b1 C
1!
#185000
0!
#190000
b0 k
b10 C
1!
#195000
0!
#200000
b11 C
1!
#202000
b0 k
#205000
0!
#210000
b0 k
b100 C
1!
#215000
0!
#220000
b0xxxxx *
bx +
b0xxxxxxxxxxxx 6
bx000000000000 ,
bx -
bx0 0
bx0 1
bx0xxxxxxxxxx0 4
bx0xxxxxxxxxx0 5
bx0 .
bx0 /
bx 2
bx 3
bx0 '
bx #
bx %
bx "
bx &
bx00110011 (
bx00110011 J
0>
b10000 B
b10000 F
b0 C
1!
#221000
b0 k
1>
#225000
0!
#230000
b0 k
b1 C
1!
#235000
0!
#240000
b0 k
b10 C
1!
#245000
0!
#250000
b11 C
1!
#252000
b0 k
#255000
0!
#260000
b0 k
b100 C
1!
#265000
0!
#270000
bx0 4
bx0 5
bx .
bx /
bx '
bx (
bx J
0>
b10100 B
b10100 F
b0 C
1!
#271000
b0 k
1>
#275000
0!
#280000
b0 k
b1 C
1!
#285000
0!
#290000
b0 k
b10 C
1!
#295000
0!
#300000
b11 C
1!
#302000
b0 k
#305000
0!
#310000
b0 k
b100 C
1!
#315000
0!
#320000
0>
b11000 B
b11000 F
b0 C
1!
#321000
b0 k
1>
#325000
0!
#330000
b0 k
b1 C
1!
#335000
0!
#340000
b0 k
b10 C
1!
#345000
0!
#350000
b11 C
1!
#352000
b0 k
#355000
0!
#360000
b0 k
b100 C
1!
#365000
0!
#370000
0>
b11100 B
b11100 F
b0 C
1!
#371000
b0 k
1>
#375000
0!
#380000
b0 k
b1 C
1!
#385000
0!
#390000
b0 k
b10 C
1!
#395000
0!
#400000
b11 C
1!
