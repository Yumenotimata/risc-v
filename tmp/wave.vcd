$date
	Wed Aug  9 17:50:11 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module startup $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 " rs1 [31:0] $end
$var wire 32 # rs2 [31:0] $end
$var wire 1 $ rst $end
$var wire 5 % rs2_addr [4:0] $end
$var wire 5 & rs1_addr [4:0] $end
$var wire 5 ' rd_addr [4:0] $end
$var wire 32 ( memory_read_data [31:0] $end
$var reg 1 ) memory_load $end
$var reg 1 * memory_wen $end
$var reg 32 + memory_write_addr [31:0] $end
$var reg 32 , memory_write_data [31:0] $end
$var reg 32 - pc [31:0] $end
$var reg 3 . stage [2:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 inc_flag [31:0] $end
$scope module memory $end
$var wire 1 ) load $end
$var wire 32 1 read_addr [31:0] $end
$var wire 1 * wen $end
$var wire 32 2 write_addr [31:0] $end
$var wire 32 3 write_data [31:0] $end
$var reg 32 4 out_data [31:0] $end
$upscope $end
$scope task Decode $end
$upscope $end
$scope task Fetch $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 5 \m[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 6 \m[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 7 \m[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 8 \m[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 9 \m[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 : \m[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ; \m[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 < \m[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 = \m[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 > \m[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 ? \m[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 @ \m[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 A \m[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 B \m[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 C \m[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 D \m[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 E \m[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 F \m[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 G \m[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 H \m[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 I \m[20] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 J \m[21] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 K \m[22] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 L \m[23] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 M \m[24] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 N \m[25] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 O \m[26] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 P \m[27] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 Q \m[28] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 R \m[29] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 S \m[30] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$scope module memory $end
$var reg 8 T \m[31] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 U \rs[0] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 V \rs[1] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 W \rs[2] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 X \rs[3] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 Y \rs[4] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 Z \rs[5] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 [ \rs[6] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 \ \rs[7] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ] \rs[8] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ^ \rs[9] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 _ \rs[10] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 ` \rs[11] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 a \rs[12] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 b \rs[13] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 c \rs[14] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 d \rs[15] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 e \rs[16] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 f \rs[17] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 g \rs[18] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 h \rs[19] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 i \rs[20] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 j \rs[21] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 k \rs[22] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 l \rs[23] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 m \rs[24] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 n \rs[25] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 o \rs[26] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 p \rs[27] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 q \rs[28] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 r \rs[29] [31:0] $end
$upscope $end
$upscope $end
$scope module startup $end
$scope module core $end
$var reg 32 s \rs[30] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110 s
b11101 r
b11100 q
b11011 p
b11010 o
b11001 n
b11000 m
b10111 l
b10110 k
b10101 j
b10100 i
b10011 h
b10010 g
b10001 f
b10000 e
b1111 d
b1110 c
b1101 b
b1100 a
b1011 `
b1010 _
b1001 ^
b1000 ]
b111 \
b110 [
b101 Z
b100 Y
b11 X
b10 W
b1 V
b0 U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
b0 @
b0 ?
b0 >
b0 =
b10001 <
b10001 ;
b10001 :
b10001 9
b10001 8
b1000001 7
b100000 6
b10000011 5
bx 4
b0 3
b0 2
b0 1
b0 0
b100000 /
bx .
b0 -
b0 ,
b0 +
1*
1)
bx (
bx '
bx &
bx %
0$
bx #
bx "
1!
$end
#5000
0!
#10000
1$
1!
#15000
0!
#20000
b1 '
b10100 #
b10100 %
b10 "
b10 &
b10001010000010010000010000011 (
b10001010000010010000010000011 4
0)
b1 0
b0 .
0$
1!
#25000
1)
0!
#30000
b1 .
1!
#35000
0!
#40000
b10 .
1!
#45000
0!
#50000
b11 .
1!
#55000
0!
#60000
b100 .
1!
#65000
0!
#70000
b10 '
b10001 #
b10001 %
b10001000100010001000100010001 (
b10001000100010001000100010001 4
0)
b100 -
b100 1
b0 .
1!
#75000
1)
0!
#80000
b1 .
1!
#85000
0!
#90000
b10 .
1!
#95000
0!
#100000
b11 .
1!
#105000
0!
#110000
b100 .
1!
#115000
0!
#120000
b0 '
b0 #
b0 %
b0 "
b0 &
b0 (
b0 4
0)
b1000 -
b1000 1
b0 .
1!
#125000
1)
0!
#130000
b1 .
1!
#135000
0!
#140000
b10 .
1!
#145000
0!
#150000
b11 .
1!
#155000
0!
#160000
b100 .
1!
#165000
0!
#170000
bx '
bx #
bx %
bx "
bx &
bx (
bx 4
0)
b1100 -
b1100 1
b0 .
1!
#175000
1)
0!
#180000
b1 .
1!
#185000
0!
#190000
b10 .
1!
#195000
0!
#200000
b11 .
1!
#205000
0!
#210000
b100 .
1!
#215000
0!
#220000
0)
b10000 -
b10000 1
b0 .
1!
#225000
1)
0!
#230000
b1 .
1!
#235000
0!
#240000
b10 .
1!
#245000
0!
#250000
b11 .
1!
#255000
0!
#260000
b100 .
1!
#265000
0!
#270000
0)
b10100 -
b10100 1
b0 .
1!
#275000
1)
0!
#280000
b1 .
1!
#285000
0!
#290000
b10 .
1!
#295000
0!
#300000
b11 .
1!
#305000
0!
#310000
b100 .
1!
#315000
0!
#320000
0)
b11000 -
b11000 1
b0 .
1!
#325000
1)
0!
#330000
b1 .
1!
#335000
0!
#340000
b10 .
1!
#345000
0!
#350000
b11 .
1!
#355000
0!
#360000
b100 .
1!
#365000
0!
#370000
0)
b11100 -
b11100 1
b0 .
1!
#375000
1)
0!
#380000
b1 .
1!
#385000
0!
#390000
b10 .
1!
#395000
0!
#400000
b11 .
1!
